{
  "cacheItemsMap": {
    "docs/00-installation.md": {
      "document": {
        "title": "Installation",
        "body": {
          "raw": "\nVault is intended to be a common dependency used by more than one tool. For this reason it's important\nthat you can load Vault from from prototypes to production bundlers. If you run into problems loading\nVault into your application, [please let us know on Github](https://github.com/IIIF-Commons/vault/issues/13)\n\n## HTML / no bundler\n\nThe easiest way to work with Vault is to grab the code from a CDN and put it into a script tag - avoiding any\nneed to build or run a server.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Vault Example</title>\n  </head>\n  <body>\n    <script src=\"https://cdn.jsdelivr.net/npm/@iiif/vault@latest/dist/index.umd.js\"></script>\n    <script>\n      let manifestUri = 'https://digirati-co-uk.github.io/journal.json';\n      const vault = new IIIFVault.Vault();\n\n      async function demo() {\n        const manifest = await vault.load(manifestUri);\n        console.log(manifest);\n      }\n\n      demo();\n    </script>\n  </body>\n</html>\n```\n\n[![Try on codesandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/iiif-vault-html-vkyuyk?file=/index.html)\n\nSimilarly you can access the Vault helpers by adding:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/@iiif/vault@latest/dist/index.umd.js\"></script>\n<script>\n  const helper = IIIFVaultHelpers.createThumbnailHelper();\n</script>\n```\n\n## NPM / Yarn or bundler\n\nUsing vault shouldn't add any extra steps or configuration to your existing build. Ideally the following\ninstructions would be unviersal:\n\n```bash\n# NPM\nnpm i @iiif/vault --save\n\n# Yarn\nyarn add @iiif/vault\n```\n\nAnd then you can use in your code:\n\n```js\nimport { Vault } from '@iiif/vault';\n\nconst vault = new Vault();\n```\n\n[![Try on codesandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/iiif-vault-intro-e26819?file=/src/index.ts)\n\n## NodeJS\n\nIf you are using NodeJS you can either use the `import` syntax or `require` depending on which [module type](https://blog.logrocket.com/commonjs-vs-es-modules-node-js/) you are using.\n\n```js\nconst { Vault } = require('@iiif/vault');\n\nconst vault = new Vault();\n```\n\nNode 18 introduced [native fetch](https://nodejs.org/en/blog/announcements/v18-release-announce/#fetch-experimental) experimentally. This is not currently supported, and we will use an\nincluded [polyfill](https://github.com/node-fetch/node-fetch) for browser fetching. We may introduce `@iiif/vault/node18` as an optional import, however this may be the same code as the browser is serving.\n",
          "html": "<p>Vault is intended to be a common dependency used by more than one tool. For this reason it's important\nthat you can load Vault from from prototypes to production bundlers. If you run into problems loading\nVault into your application, <a href=\"https://github.com/IIIF-Commons/vault/issues/13\">please let us know on Github</a></p>\n<h2>HTML / no bundler</h2>\n<p>The easiest way to work with Vault is to grab the code from a CDN and put it into a script tag - avoiding any\nneed to build or run a server.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Vault Example<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/@iiif/vault@latest/dist/index.umd.js\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">let</span> manifestUri = <span class=\"hljs-string\">'https://digirati-co-uk.github.io/journal.json'</span>;\n      <span class=\"hljs-keyword\">const</span> vault = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IIIFVault</span>.<span class=\"hljs-title class_\">Vault</span>();\n\n      <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">demo</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">const</span> manifest = <span class=\"hljs-keyword\">await</span> vault.<span class=\"hljs-title function_\">load</span>(manifestUri);\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(manifest);\n      }\n\n      <span class=\"hljs-title function_\">demo</span>();\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/iiif-vault-html-vkyuyk?file=/index.html\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Try on codesandbox\"></a></p>\n<p>Similarly you can access the Vault helpers by adding:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/@iiif/vault@latest/dist/index.umd.js\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> helper = <span class=\"hljs-title class_\">IIIFVaultHelpers</span>.<span class=\"hljs-title function_\">createThumbnailHelper</span>();\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<h2>NPM / Yarn or bundler</h2>\n<p>Using vault shouldn't add any extra steps or configuration to your existing build. Ideally the following\ninstructions would be unviersal:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># NPM</span>\nnpm i @iiif/vault --save\n\n<span class=\"hljs-comment\"># Yarn</span>\nyarn add @iiif/vault\n</code></pre>\n<p>And then you can use in your code:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Vault</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@iiif/vault'</span>;\n\n<span class=\"hljs-keyword\">const</span> vault = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vault</span>();\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/iiif-vault-intro-e26819?file=/src/index.ts\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Try on codesandbox\"></a></p>\n<h2>NodeJS</h2>\n<p>If you are using NodeJS you can either use the <code>import</code> syntax or <code>require</code> depending on which <a href=\"https://blog.logrocket.com/commonjs-vs-es-modules-node-js/\">module type</a> you are using.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">Vault</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@iiif/vault'</span>);\n\n<span class=\"hljs-keyword\">const</span> vault = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vault</span>();\n</code></pre>\n<p>Node 18 introduced <a href=\"https://nodejs.org/en/blog/announcements/v18-release-announce/#fetch-experimental\">native fetch</a> experimentally. This is not currently supported, and we will use an\nincluded <a href=\"https://github.com/node-fetch/node-fetch\">polyfill</a> for browser fetching. We may introduce <code>@iiif/vault/node18</code> as an optional import, however this may be the same code as the browser is serving.</p>"
        },
        "_id": "docs/00-installation.md",
        "_raw": {
          "sourceFilePath": "docs/00-installation.md",
          "sourceFileName": "00-installation.md",
          "sourceFileDir": "docs",
          "contentType": "markdown",
          "flattenedPath": "docs/00-installation"
        },
        "type": "Docs",
        "filename": "installation",
        "url": "/docs/installation"
      },
      "documentHash": "1651444975281",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/01-vault/01-loading-manifests.md": {
      "document": {
        "title": "Loading manifests",
        "folder": "vault",
        "body": {
          "raw": "\n### Loading using URLs\nThere are 3 APIs available for loading resources.\n\n* Load\n* Load manifest\n* Load collection\n\nThese are functionally identical, but the [Typescript](/docs/types) types returned are more specific for `loadManifest`\nand `loadCollection`. The remaining examples will all use `.loadManifest()`.\n\nWhen you call a load function a promise will always be returned, even if the data is cached and available. \n\n```js\nimport { Vault } from '@iiif/vault';\n\nconst vault = new Vault();\nvault.loadManifest(`https://example.org/manifest`).then(manifest => {\n    // Do something with manifest.\n});\n```\n\nIf you are using in a context that supports\n\n#### Status object\nWhen you call a loader a status object will be created.\n\n```typescript\ninterface ResourceStatus {\n  loadingState: 'RESOURCE_ERROR' | 'RESOURCE_LOADING' | 'RESOURCE_READY';\n  uriMismatch: boolean;\n  requestUri: string;\n  resourceUri: string;\n  error?: string;\n}\n```\n\nAs soon as you call a load function the resource will transition to `RESOURCE_LOADING` if it has not already been\nfetched. It will then either progress to `RESOURCE_ERROR` with `status.error` populated with the text representation of\nthe exception, or it will progress to `RESOURCE_READY`.\n\nIf the URL requested does not match the `@id` or `id` in the returned JSON then a mapping will be kept. In the status \nthere are 2 urls noted.\n* `requestUri` - the string passed to `load()` and the one requested\n* `resourceUri` - the Identifier present in the resource  (`id` or `@id`)\n* `uriMismatch` - True if the two Uris above do not match\n\nInternally this allows vault to get a handle on the Manifest using either the URI or the Identifier of the resource. For\nall internal maps the Identifier is preferred, not the Uri.\n\nCurrently, there is no way to \"evict\" a resource from Vault. \n\nTwo helpers relating to status\n\n* `vault.requestStatus(id)` - returns the current status, or undefined\n* `vault.ensureLoaded(id)` - similar to load, but does not return anything. Only calls fetcher if there is no status. Additionally it will not retry errors. Useful for `prefetch` or similar scenarios.\n\n```js\nconst status = vault.requestStatus('https://example.org/manifest');\nif (status) {\n  switch (status.loadingState) {\n    case 'RESOURCE_READY':\n    // ...\n    case 'RESOURCE_LOADING':\n    // ...\n    case 'RESOURCE_ERROR':\n    // ...\n  }\n}\n```\n\n#### Upgrading resources\n\nWhen you load a IIIF resource into Vault, a check will be made to see if conforms to the IIIF Presentation 2.1 specification. If\nthe v2 context is found, the IIIF resource will be sent through an upgrade path. This aims to upgrade all 2.1 resource to IIIF\nPresentation 3.0 and in the future will upgrade to whichever is the latest version. You can read in detail how this works in the [Upgrading](/docs/parser/upgrading) section.\n\nWhen reading IIIF resources loaded by vault, you can safely assume that they will be well-formed Presentation 3. This should\nreduce that code required to support features while still supporting as wide a range of IIIF as possible.\n\n<!-- this is paragraph rough -->\nCurrently, if you load Presentation 3 resources into Vault, no attempt will be made to fix any common mistakes or irregular IIIF. In the\nfuture this will change, with the current behaviour being an optional [Strict Mode](/docs/vault/roadmap#strict-mode) and a new compatibility mode will be introduced. This\nwill allow Vault and the associated tools and types to be used as a way to validate IIIF for those implementing it. If Vault only\nhad this loose/compatibility mode it could run the risk of incorrectly validating bugs from those creating IIIF implementations\nthemselves.\n\n### Providing JSON\n\nThere are some cases where you may want to load IIIF JSON before it goes to Vault. This could be for Authenticated resources\nor resources that may not have been saved yet - or may not ever be saved. For each of the `load()` methods on Vault there is \nan optional second argument for the JSON to be provided.\n\n```js\nconst manifest = await vault.load('https://example.org/manifest-1', {\n    '@context': 'http://iiif.io/api/presentation/3/context.json'\n    id: 'https://example.org/manifest-1',\n    type: 'Manifest',\n    ... \n})\n```\n\nThis will still return a promise, for consistency. Check the [advanced](/docs/vault/advanced) docs if you need to \nload data into Vault synchronously.\n\n### Node JS\n\nWhen calling a load function in the browser, the native `fetch()` api is used. You will need to provide a polyfill for this\nif you need to target browser that do not support this.\n\nStarting from Node 18+ you can use the built-in `fetch()` api. Prior versions of Node will include the `node-fetch` library\nfor fetching resources.\n\n### Custom fetchers\n\nWhen you create a Vault you can optionally pass in a custom fetcher function.\n```js\nimport { Vault } from '@iiif/vault';\n\nconst customVault = new Vault({\n  customFetcher: async (url) => {\n    // custom loading logic.\n  }, \n})\n```\n\nThis can either return a promise or just the javascript object for the resource.\n\nIf you need to completely replace the fetching mechanism, but retain the loading statuses provided by Vault, you can create\na custom loader. This is included as a separate export.\n\n```js\nimport { createFetchHelper } from '@iiif/vault/utility';\n\nconst vault = new Vault();\n\nconst newFetch = createFetchHelper(vault.store, async (url, options) => {\n    // custom logic..\n});\n\nawait newFetch('htts://example.org/manifest-1', { some: 'custom option' });\n```\n\nThis custom fetcher will be tied to the store you created. Like the custom fetcher in Vault it should return the loaded\nresource as a JS object. You can create as many of these custom fetch helpers for a single vault. Creating these fetchers\nwill **not** replace the `vault.load()` functions, they continue to work. \n\n\n### CORS\n\nIn the browser, `fetch()` is used without any arguments or CORS settings. This may be a common use-case for overwriting\nthe default fetcher if you required cookies to be sent to authenticate resources. Vault will not retry resources that run\ninto CORS errors. The most common cause of CORS errors is 5xx errors with Vault.\n",
          "html": "<h3>Loading using URLs</h3>\n<p>There are 3 APIs available for loading resources.</p>\n<ul>\n<li>Load</li>\n<li>Load manifest</li>\n<li>Load collection</li>\n</ul>\n<p>These are functionally identical, but the <a href=\"/docs/types\">Typescript</a> types returned are more specific for <code>loadManifest</code>\nand <code>loadCollection</code>. The remaining examples will all use <code>.loadManifest()</code>.</p>\n<p>When you call a load function a promise will always be returned, even if the data is cached and available.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Vault</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@iiif/vault'</span>;\n\n<span class=\"hljs-keyword\">const</span> vault = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vault</span>();\nvault.<span class=\"hljs-title function_\">loadManifest</span>(<span class=\"hljs-string\">`https://example.org/manifest`</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">manifest</span> =></span> {\n    <span class=\"hljs-comment\">// Do something with manifest.</span>\n});\n</code></pre>\n<p>If you are using in a context that supports</p>\n<h4>Status object</h4>\n<p>When you call a loader a status object will be created.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ResourceStatus</span> {\n  <span class=\"hljs-attr\">loadingState</span>: <span class=\"hljs-string\">'RESOURCE_ERROR'</span> | <span class=\"hljs-string\">'RESOURCE_LOADING'</span> | <span class=\"hljs-string\">'RESOURCE_READY'</span>;\n  <span class=\"hljs-attr\">uriMismatch</span>: <span class=\"hljs-built_in\">boolean</span>;\n  <span class=\"hljs-attr\">requestUri</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">resourceUri</span>: <span class=\"hljs-built_in\">string</span>;\n  error?: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n<p>As soon as you call a load function the resource will transition to <code>RESOURCE_LOADING</code> if it has not already been\nfetched. It will then either progress to <code>RESOURCE_ERROR</code> with <code>status.error</code> populated with the text representation of\nthe exception, or it will progress to <code>RESOURCE_READY</code>.</p>\n<p>If the URL requested does not match the <code>@id</code> or <code>id</code> in the returned JSON then a mapping will be kept. In the status\nthere are 2 urls noted.</p>\n<ul>\n<li><code>requestUri</code> - the string passed to <code>load()</code> and the one requested</li>\n<li><code>resourceUri</code> - the Identifier present in the resource  (<code>id</code> or <code>@id</code>)</li>\n<li><code>uriMismatch</code> - True if the two Uris above do not match</li>\n</ul>\n<p>Internally this allows vault to get a handle on the Manifest using either the URI or the Identifier of the resource. For\nall internal maps the Identifier is preferred, not the Uri.</p>\n<p>Currently, there is no way to \"evict\" a resource from Vault.</p>\n<p>Two helpers relating to status</p>\n<ul>\n<li><code>vault.requestStatus(id)</code> - returns the current status, or undefined</li>\n<li><code>vault.ensureLoaded(id)</code> - similar to load, but does not return anything. Only calls fetcher if there is no status. Additionally it will not retry errors. Useful for <code>prefetch</code> or similar scenarios.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> status = vault.<span class=\"hljs-title function_\">requestStatus</span>(<span class=\"hljs-string\">'https://example.org/manifest'</span>);\n<span class=\"hljs-keyword\">if</span> (status) {\n  <span class=\"hljs-keyword\">switch</span> (status.<span class=\"hljs-property\">loadingState</span>) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'RESOURCE_READY'</span>:\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'RESOURCE_LOADING'</span>:\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'RESOURCE_ERROR'</span>:\n    <span class=\"hljs-comment\">// ...</span>\n  }\n}\n</code></pre>\n<h4>Upgrading resources</h4>\n<p>When you load a IIIF resource into Vault, a check will be made to see if conforms to the IIIF Presentation 2.1 specification. If\nthe v2 context is found, the IIIF resource will be sent through an upgrade path. This aims to upgrade all 2.1 resource to IIIF\nPresentation 3.0 and in the future will upgrade to whichever is the latest version. You can read in detail how this works in the <a href=\"/docs/parser/upgrading\">Upgrading</a> section.</p>\n<p>When reading IIIF resources loaded by vault, you can safely assume that they will be well-formed Presentation 3. This should\nreduce that code required to support features while still supporting as wide a range of IIIF as possible.</p>\n<p>Currently, if you load Presentation 3 resources into Vault, no attempt will be made to fix any common mistakes or irregular IIIF. In the\nfuture this will change, with the current behaviour being an optional <a href=\"/docs/vault/roadmap#strict-mode\">Strict Mode</a> and a new compatibility mode will be introduced. This\nwill allow Vault and the associated tools and types to be used as a way to validate IIIF for those implementing it. If Vault only\nhad this loose/compatibility mode it could run the risk of incorrectly validating bugs from those creating IIIF implementations\nthemselves.</p>\n<h3>Providing JSON</h3>\n<p>There are some cases where you may want to load IIIF JSON before it goes to Vault. This could be for Authenticated resources\nor resources that may not have been saved yet - or may not ever be saved. For each of the <code>load()</code> methods on Vault there is\nan optional second argument for the JSON to be provided.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> manifest = <span class=\"hljs-keyword\">await</span> vault.<span class=\"hljs-title function_\">load</span>(<span class=\"hljs-string\">'https://example.org/manifest-1'</span>, {\n    <span class=\"hljs-string\">'@context'</span>: <span class=\"hljs-string\">'http://iiif.io/api/presentation/3/context.json'</span>\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">'https://example.org/manifest-1'</span>,\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'Manifest'</span>,\n    ... \n})\n</code></pre>\n<p>This will still return a promise, for consistency. Check the <a href=\"/docs/vault/advanced\">advanced</a> docs if you need to\nload data into Vault synchronously.</p>\n<h3>Node JS</h3>\n<p>When calling a load function in the browser, the native <code>fetch()</code> api is used. You will need to provide a polyfill for this\nif you need to target browser that do not support this.</p>\n<p>Starting from Node 18+ you can use the built-in <code>fetch()</code> api. Prior versions of Node will include the <code>node-fetch</code> library\nfor fetching resources.</p>\n<h3>Custom fetchers</h3>\n<p>When you create a Vault you can optionally pass in a custom fetcher function.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Vault</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@iiif/vault'</span>;\n\n<span class=\"hljs-keyword\">const</span> customVault = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vault</span>({\n  <span class=\"hljs-attr\">customFetcher</span>: <span class=\"hljs-keyword\">async</span> (url) => {\n    <span class=\"hljs-comment\">// custom loading logic.</span>\n  }, \n})\n</code></pre>\n<p>This can either return a promise or just the javascript object for the resource.</p>\n<p>If you need to completely replace the fetching mechanism, but retain the loading statuses provided by Vault, you can create\na custom loader. This is included as a separate export.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { createFetchHelper } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@iiif/vault/utility'</span>;\n\n<span class=\"hljs-keyword\">const</span> vault = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vault</span>();\n\n<span class=\"hljs-keyword\">const</span> newFetch = <span class=\"hljs-title function_\">createFetchHelper</span>(vault.<span class=\"hljs-property\">store</span>, <span class=\"hljs-keyword\">async</span> (url, options) => {\n    <span class=\"hljs-comment\">// custom logic..</span>\n});\n\n<span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">newFetch</span>(<span class=\"hljs-string\">'htts://example.org/manifest-1'</span>, { <span class=\"hljs-attr\">some</span>: <span class=\"hljs-string\">'custom option'</span> });\n</code></pre>\n<p>This custom fetcher will be tied to the store you created. Like the custom fetcher in Vault it should return the loaded\nresource as a JS object. You can create as many of these custom fetch helpers for a single vault. Creating these fetchers\nwill <strong>not</strong> replace the <code>vault.load()</code> functions, they continue to work.</p>\n<h3>CORS</h3>\n<p>In the browser, <code>fetch()</code> is used without any arguments or CORS settings. This may be a common use-case for overwriting\nthe default fetcher if you required cookies to be sent to authenticate resources. Vault will not retry resources that run\ninto CORS errors. The most common cause of CORS errors is 5xx errors with Vault.</p>"
        },
        "_id": "docs/01-vault/01-loading-manifests.md",
        "_raw": {
          "sourceFilePath": "docs/01-vault/01-loading-manifests.md",
          "sourceFileName": "01-loading-manifests.md",
          "sourceFileDir": "docs/01-vault",
          "contentType": "markdown",
          "flattenedPath": "docs/01-vault/01-loading-manifests"
        },
        "type": "Docs",
        "filename": "loading-manifests",
        "url": "/docs/vault/loading-manifests"
      },
      "documentHash": "1652214250943",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/01-vault/02-loading-collections.md": {
      "document": {
        "title": "Loading collections",
        "folder": "vault",
        "body": {
          "raw": "\n### Fetching collections\n\nSimilar to [loading manifests](/docs/vault/loading-manifests) you can use a helper to load a Collection with code\nassistance / types.\n```js\nimport { Vault } from '@iiif/vault';\n\nconst vault = new Vault();\nconst collection = await vault.loadCollection('https://example.org/collection-1');\n```\n\nYou can also use the normal `vault.load()` too.\n\nAll the same rules apply as manifests.\n\n### Paginated collections\n\nVault does not treat paginated collections as special. They are treated as independent collections. You could create\na [Vault Helper](/docs/helpers) to make this seamless. If you do, please let us know!\n\n### Streaming large collections\n\nVault does not support streaming large collections, but it is an area that may be useful\nfor some of the largest IIIF collections. In principle the actions to create this type of loader are available.\n\n```js\nimport { importEntities } from '@iiif/vault/actions';\nimport { actionListFromResource } from '@iiif/vault/utility';\n\nconst loader = someLibrary('https://example.org/big-collection-1', async (manifest) => {\n    // Create actions from resource\n    const actions = actionListFromResource(manifest.id, manifest);\n    // Dispatch events (loading in a single manifest at a time, as it streams)\n    vault.store.dispatch(batchActions({ actions }));\n});\n\n\nloader.take(100); // Just an example - laod the first 100.\n```\n",
          "html": "<h3>Fetching collections</h3>\n<p>Similar to <a href=\"/docs/vault/loading-manifests\">loading manifests</a> you can use a helper to load a Collection with code\nassistance / types.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Vault</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@iiif/vault'</span>;\n\n<span class=\"hljs-keyword\">const</span> vault = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vault</span>();\n<span class=\"hljs-keyword\">const</span> collection = <span class=\"hljs-keyword\">await</span> vault.<span class=\"hljs-title function_\">loadCollection</span>(<span class=\"hljs-string\">'https://example.org/collection-1'</span>);\n</code></pre>\n<p>You can also use the normal <code>vault.load()</code> too.</p>\n<p>All the same rules apply as manifests.</p>\n<h3>Paginated collections</h3>\n<p>Vault does not treat paginated collections as special. They are treated as independent collections. You could create\na <a href=\"/docs/helpers\">Vault Helper</a> to make this seamless. If you do, please let us know!</p>\n<h3>Streaming large collections</h3>\n<p>Vault does not support streaming large collections, but it is an area that may be useful\nfor some of the largest IIIF collections. In principle the actions to create this type of loader are available.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { importEntities } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@iiif/vault/actions'</span>;\n<span class=\"hljs-keyword\">import</span> { actionListFromResource } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@iiif/vault/utility'</span>;\n\n<span class=\"hljs-keyword\">const</span> loader = <span class=\"hljs-title function_\">someLibrary</span>(<span class=\"hljs-string\">'https://example.org/big-collection-1'</span>, <span class=\"hljs-keyword\">async</span> (manifest) => {\n    <span class=\"hljs-comment\">// Create actions from resource</span>\n    <span class=\"hljs-keyword\">const</span> actions = <span class=\"hljs-title function_\">actionListFromResource</span>(manifest.<span class=\"hljs-property\">id</span>, manifest);\n    <span class=\"hljs-comment\">// Dispatch events (loading in a single manifest at a time, as it streams)</span>\n    vault.<span class=\"hljs-property\">store</span>.<span class=\"hljs-title function_\">dispatch</span>(<span class=\"hljs-title function_\">batchActions</span>({ actions }));\n});\n\n\nloader.<span class=\"hljs-title function_\">take</span>(<span class=\"hljs-number\">100</span>); <span class=\"hljs-comment\">// Just an example - laod the first 100.</span>\n</code></pre>"
        },
        "_id": "docs/01-vault/02-loading-collections.md",
        "_raw": {
          "sourceFilePath": "docs/01-vault/02-loading-collections.md",
          "sourceFileName": "02-loading-collections.md",
          "sourceFileDir": "docs/01-vault",
          "contentType": "markdown",
          "flattenedPath": "docs/01-vault/02-loading-collections"
        },
        "type": "Docs",
        "filename": "loading-collections",
        "url": "/docs/vault/loading-collections"
      },
      "documentHash": "1652215263312",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/01-vault/03-loading-annotations.md": {
      "document": {
        "title": "Loading annotations",
        "folder": "vault",
        "body": {
          "raw": "\n### Loading annotations\n\nAnnotations can either be embedded inside the IIIF, or load externally. Vault does not determine if an Annotation page\nis embedded or not. You can check if it has been loaded previously (or attempted). An Annotation Page can be loaded\nlike other resources, with the same rules of loading.\n\n```js\nconst annotationPage = await vault.load('https://example.org/annotation-page-1');\n\nfor (const annotation of annotationPage.items) {\n    // ...\n}\n```\n\nWhen you load an Annotation Page, it will be merged with the \"snippet\" that was in the Manifest or other resources from\nwhere it was loaded. This merging can cause some information to be lost. For example, a transcription may appear in a \nManifest as:\n\n```json\n{\n  \"seeAlso\": [\n    {\n      \"id\": \"https://example.org/annotation-page-1\"\n      \"type\": \"AnnotationPage\",\n      \"label\": { \"en\": [\"Transcribed lines\"] }\n    }\n  ]\n}\n```\n\nHowever, when you load the annotation, it may have a different label - or a missing label. Vault will treat this \nresolved version of the resource as the ground truth. This may result in lost labels from the snippet.\n```json\n{\n  \"id\": \"https://example.org/annotation-page-1\"\n  \"type\": \"AnnotationPage\",\n  \"label\": { \"en\": [\"Transcribed lines of Manifest 123\"] }\n}\n```\n\nWe are looking at how best to resolve this, and if this will affect other properties that may exist only in a snippet \nor change.\n\nSolving this problem is in the [Roadmap](/docs/vault/roadmap);\n\nSimilar to Manifests/Collections you can check if an Annotation Collection is previously loaded\n\n```js\nconst status = vault.requestStatus('https://example.org/annotation-page-1');\n\nif (status.loadingState !== 'RESOURCE_LOADING') {\n  // Do something.\n}\n```\n\n### Paged annotations\n\nVault does not currently have any helpers for managing many pages of annotations. Also, it does not currently support\nloading in Presentation 2.0 annotation lists, such as search results. These are open problems that may be solved with\na combination of changes to Vault and Vault helpers.\n\nCheck the [Annotation pages](/docs/helpers/annotation-pages) page for more information.\n",
          "html": "<h3>Loading annotations</h3>\n<p>Annotations can either be embedded inside the IIIF, or load externally. Vault does not determine if an Annotation page\nis embedded or not. You can check if it has been loaded previously (or attempted). An Annotation Page can be loaded\nlike other resources, with the same rules of loading.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> annotationPage = <span class=\"hljs-keyword\">await</span> vault.<span class=\"hljs-title function_\">load</span>(<span class=\"hljs-string\">'https://example.org/annotation-page-1'</span>);\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> annotation <span class=\"hljs-keyword\">of</span> annotationPage.<span class=\"hljs-property\">items</span>) {\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>When you load an Annotation Page, it will be merged with the \"snippet\" that was in the Manifest or other resources from\nwhere it was loaded. This merging can cause some information to be lost. For example, a transcription may appear in a\nManifest as:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"seeAlso\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://example.org/annotation-page-1\"</span>\n      <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"AnnotationPage\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"label\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">\"en\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"Transcribed lines\"</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>However, when you load the annotation, it may have a different label - or a missing label. Vault will treat this\nresolved version of the resource as the ground truth. This may result in lost labels from the snippet.</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://example.org/annotation-page-1\"</span>\n  <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"AnnotationPage\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"label\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">\"en\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"Transcribed lines of Manifest 123\"</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>We are looking at how best to resolve this, and if this will affect other properties that may exist only in a snippet\nor change.</p>\n<p>Solving this problem is in the <a href=\"/docs/vault/roadmap\">Roadmap</a>;</p>\n<p>Similar to Manifests/Collections you can check if an Annotation Collection is previously loaded</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> status = vault.<span class=\"hljs-title function_\">requestStatus</span>(<span class=\"hljs-string\">'https://example.org/annotation-page-1'</span>);\n\n<span class=\"hljs-keyword\">if</span> (status.<span class=\"hljs-property\">loadingState</span> !== <span class=\"hljs-string\">'RESOURCE_LOADING'</span>) {\n  <span class=\"hljs-comment\">// Do something.</span>\n}\n</code></pre>\n<h3>Paged annotations</h3>\n<p>Vault does not currently have any helpers for managing many pages of annotations. Also, it does not currently support\nloading in Presentation 2.0 annotation lists, such as search results. These are open problems that may be solved with\na combination of changes to Vault and Vault helpers.</p>\n<p>Check the <a href=\"/docs/helpers/annotation-pages\">Annotation pages</a> page for more information.</p>"
        },
        "_id": "docs/01-vault/03-loading-annotations.md",
        "_raw": {
          "sourceFilePath": "docs/01-vault/03-loading-annotations.md",
          "sourceFileName": "03-loading-annotations.md",
          "sourceFileDir": "docs/01-vault",
          "contentType": "markdown",
          "flattenedPath": "docs/01-vault/03-loading-annotations"
        },
        "type": "Docs",
        "filename": "loading-annotations",
        "url": "/docs/vault/loading-annotations"
      },
      "documentHash": "1652215845440",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/01-vault/04-reading-resources.md": {
      "document": {
        "title": "Reading resources",
        "folder": "vault",
        "body": {
          "raw": "\n### How references work\nWhen you load a resource into Vault, each level of the resource will be flattened. For example, in a Manifest, all\nthe Canvases will be replaced with `{id,type}` references. \n```json\n{\n  \"id\": \"https://example.org/manifest-1\",\n  \"type\": \"Manifest\",\n  \"items\": [\n    { \"id\":  \"https://example.org/manifest-1/c1\", \"type\":  \"Canvas\" },\n    { \"id\":  \"https://example.org/manifest-1/c2\", \"type\":  \"Canvas\" },\n    { \"id\":  \"https://example.org/manifest-1/c3\", \"type\":  \"Canvas\" }\n    ...\n    { \"id\":  \"https://example.org/manifest-1/c62\", \"type\":  \"Canvas\" }\n  ]\n}\n```\n\nThis is done for many reasons, and the full detailed transformation is detailed [here](/docs/vault/advanced#normalization).\n\nIf you want to get the resolved resource you can use one of two methods: `vault.get()` or `vault.hydrate()`. They work\nin a similar way. \n\n\nVault.get will return either the resolved resource if it exists in Vault, or undefined if not.\n```js\nvault.get('https://example.org/manifest-1/c1');\n// > { id: '...' }\n\nvault.get({ id: 'https://example.org/manifest-1/c1', type: 'Canvas' });\n// > { id: '...' }\n\nvault.get('https://example.org/DOES_NOT_EXIST');\n// > undefined\n```\n\nVault.hydrate will return itself if the resource does not exist, allowing for a more predictable return type - particularly\n useful in Reactive environments where a resource will eventually exist.\n```js\nvault.hydrate('https://example.org/manifest-1/c1');\n// > { id: '...' }\n\nvault.hydate('https://example.org/DOES_NOT_EXIST');\n// > { id: 'https://example.org/DOES_NOT_EXIST', type: 'unknown' }\n\nvault.hydate({ id: 'https://example.org/DOES_NOT_EXIST', type: 'Manifest' });\n// > { id: 'https://example.org/DOES_NOT_EXIST', type: 'Manifest' }\n```\n\n\nBoth `Vault.get()` and `Vault.hydrate()` can accept many types of input - and it will try to return the correct type. It\ncan accept:\n\n* String identifiers\n* {id,type} references\n* List of strings\n* List of {id,type} references\n* List of mixed strings/references\n* Also in the form: `get(id, type)`\n\nThe natural form of this is `vault.get({ id, type })` and this should be preferred if possible. 99% of the time you should\nnot need to manually pass an ID or reference in this form, instead just pass in existing partial resources:\n\n```js\nconst manifest = vault.get('https://example.org/manifest-1'); // loaded previously.\nconst allCanvases = vault.get(manifest.canvases); // resolved canvases.\n\nfor (const canvas of allCanvases) {\n  const annoPages = vault.get(canvas.items);\n  // ...\n}\n```\n\nIdentifiers\nGuidelines on reusability\nCustom + legacy services\nAnnotations and variations\nLanguage maps\n",
          "html": "<h3>How references work</h3>\n<p>When you load a resource into Vault, each level of the resource will be flattened. For example, in a Manifest, all\nthe Canvases will be replaced with <code>{id,type}</code> references.</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://example.org/manifest-1\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Manifest\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"items\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"https://example.org/manifest-1/c1\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"Canvas\"</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"https://example.org/manifest-1/c2\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"Canvas\"</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"https://example.org/manifest-1/c3\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"Canvas\"</span> <span class=\"hljs-punctuation\">}</span>\n    ...\n    <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"https://example.org/manifest-1/c62\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"Canvas\"</span> <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>This is done for many reasons, and the full detailed transformation is detailed <a href=\"/docs/vault/advanced#normalization\">here</a>.</p>\n<p>If you want to get the resolved resource you can use one of two methods: <code>vault.get()</code> or <code>vault.hydrate()</code>. They work\nin a similar way.</p>\n<p>Vault.get will return either the resolved resource if it exists in Vault, or undefined if not.</p>\n<pre><code class=\"hljs language-js\">vault.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'https://example.org/manifest-1/c1'</span>);\n<span class=\"hljs-comment\">// > { id: '...' }</span>\n\nvault.<span class=\"hljs-title function_\">get</span>({ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">'https://example.org/manifest-1/c1'</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'Canvas'</span> });\n<span class=\"hljs-comment\">// > { id: '...' }</span>\n\nvault.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'https://example.org/DOES_NOT_EXIST'</span>);\n<span class=\"hljs-comment\">// > undefined</span>\n</code></pre>\n<p>Vault.hydrate will return itself if the resource does not exist, allowing for a more predictable return type - particularly\nuseful in Reactive environments where a resource will eventually exist.</p>\n<pre><code class=\"hljs language-js\">vault.<span class=\"hljs-title function_\">hydrate</span>(<span class=\"hljs-string\">'https://example.org/manifest-1/c1'</span>);\n<span class=\"hljs-comment\">// > { id: '...' }</span>\n\nvault.<span class=\"hljs-title function_\">hydate</span>(<span class=\"hljs-string\">'https://example.org/DOES_NOT_EXIST'</span>);\n<span class=\"hljs-comment\">// > { id: 'https://example.org/DOES_NOT_EXIST', type: 'unknown' }</span>\n\nvault.<span class=\"hljs-title function_\">hydate</span>({ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">'https://example.org/DOES_NOT_EXIST'</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'Manifest'</span> });\n<span class=\"hljs-comment\">// > { id: 'https://example.org/DOES_NOT_EXIST', type: 'Manifest' }</span>\n</code></pre>\n<p>Both <code>Vault.get()</code> and <code>Vault.hydrate()</code> can accept many types of input - and it will try to return the correct type. It\ncan accept:</p>\n<ul>\n<li>String identifiers</li>\n<li>{id,type} references</li>\n<li>List of strings</li>\n<li>List of {id,type} references</li>\n<li>List of mixed strings/references</li>\n<li>Also in the form: <code>get(id, type)</code></li>\n</ul>\n<p>The natural form of this is <code>vault.get({ id, type })</code> and this should be preferred if possible. 99% of the time you should\nnot need to manually pass an ID or reference in this form, instead just pass in existing partial resources:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> manifest = vault.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'https://example.org/manifest-1'</span>); <span class=\"hljs-comment\">// loaded previously.</span>\n<span class=\"hljs-keyword\">const</span> allCanvases = vault.<span class=\"hljs-title function_\">get</span>(manifest.<span class=\"hljs-property\">canvases</span>); <span class=\"hljs-comment\">// resolved canvases.</span>\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> canvas <span class=\"hljs-keyword\">of</span> allCanvases) {\n  <span class=\"hljs-keyword\">const</span> annoPages = vault.<span class=\"hljs-title function_\">get</span>(canvas.<span class=\"hljs-property\">items</span>);\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>Identifiers\nGuidelines on reusability\nCustom + legacy services\nAnnotations and variations\nLanguage maps</p>"
        },
        "_id": "docs/01-vault/04-reading-resources.md",
        "_raw": {
          "sourceFilePath": "docs/01-vault/04-reading-resources.md",
          "sourceFileName": "04-reading-resources.md",
          "sourceFileDir": "docs/01-vault",
          "contentType": "markdown",
          "flattenedPath": "docs/01-vault/04-reading-resources"
        },
        "type": "Docs",
        "filename": "reading-resources",
        "url": "/docs/vault/reading-resources"
      },
      "documentHash": "1652216996741",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/01-vault/05-subscriptions.md": {
      "document": {
        "title": "Subscriptions and reactivity",
        "folder": "vault",
        "body": {
          "raw": "\nListening for changes to data\nExample: React\nEvent reference\nLoading vs Editing\n",
          "html": "<p>Listening for changes to data\nExample: React\nEvent reference\nLoading vs Editing</p>"
        },
        "_id": "docs/01-vault/05-subscriptions.md",
        "_raw": {
          "sourceFilePath": "docs/01-vault/05-subscriptions.md",
          "sourceFileName": "05-subscriptions.md",
          "sourceFileDir": "docs/01-vault",
          "contentType": "markdown",
          "flattenedPath": "docs/01-vault/05-subscriptions"
        },
        "type": "Docs",
        "filename": "subscriptions",
        "url": "/docs/vault/subscriptions"
      },
      "documentHash": "1652215896491",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/01-vault/06-meta-state.md": {
      "document": {
        "title": "Meta state",
        "folder": "vault",
        "body": {
          "raw": "\nIntroduction\nEvents examples\nStyles example\nAPI Reference\n",
          "html": "<p>Introduction\nEvents examples\nStyles example\nAPI Reference</p>"
        },
        "_id": "docs/01-vault/06-meta-state.md",
        "_raw": {
          "sourceFilePath": "docs/01-vault/06-meta-state.md",
          "sourceFileName": "06-meta-state.md",
          "sourceFileDir": "docs/01-vault",
          "contentType": "markdown",
          "flattenedPath": "docs/01-vault/06-meta-state"
        },
        "type": "Docs",
        "filename": "meta-state",
        "url": "/docs/vault/meta-state"
      },
      "documentHash": "1652215904434",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/01-vault/07-typescript.md": {
      "document": {
        "title": "Typescript guide",
        "folder": "vault",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/01-vault/07-typescript.md",
        "_raw": {
          "sourceFilePath": "docs/01-vault/07-typescript.md",
          "sourceFileName": "07-typescript.md",
          "sourceFileDir": "docs/01-vault",
          "contentType": "markdown",
          "flattenedPath": "docs/01-vault/07-typescript"
        },
        "type": "Docs",
        "filename": "typescript",
        "url": "/docs/vault/typescript"
      },
      "documentHash": "1651439784504",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/01-vault/08-abstractions.md": {
      "document": {
        "title": "Creating abstractions",
        "folder": "vault",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/01-vault/08-abstractions.md",
        "_raw": {
          "sourceFilePath": "docs/01-vault/08-abstractions.md",
          "sourceFileName": "08-abstractions.md",
          "sourceFileDir": "docs/01-vault",
          "contentType": "markdown",
          "flattenedPath": "docs/01-vault/08-abstractions"
        },
        "type": "Docs",
        "filename": "abstractions",
        "url": "/docs/vault/abstractions"
      },
      "documentHash": "1651439383690",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/01-vault/09-open-vault.md": {
      "document": {
        "title": "Future interactivity",
        "folder": "vault",
        "body": {
          "raw": "\nService worker\nRemote vault\nVault as a service\n",
          "html": "<p>Service worker\nRemote vault\nVault as a service</p>"
        },
        "_id": "docs/01-vault/09-open-vault.md",
        "_raw": {
          "sourceFilePath": "docs/01-vault/09-open-vault.md",
          "sourceFileName": "09-open-vault.md",
          "sourceFileDir": "docs/01-vault",
          "contentType": "markdown",
          "flattenedPath": "docs/01-vault/09-open-vault"
        },
        "type": "Docs",
        "filename": "open-vault",
        "url": "/docs/vault/open-vault"
      },
      "documentHash": "1652215924162",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/01-vault/10-resource-editing.md": {
      "document": {
        "title": "Resource editing",
        "folder": "vault",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/01-vault/10-resource-editing.md",
        "_raw": {
          "sourceFilePath": "docs/01-vault/10-resource-editing.md",
          "sourceFileName": "10-resource-editing.md",
          "sourceFileDir": "docs/01-vault",
          "contentType": "markdown",
          "flattenedPath": "docs/01-vault/10-resource-editing"
        },
        "type": "Docs",
        "filename": "resource-editing",
        "url": "/docs/vault/resource-editing"
      },
      "documentHash": "1651439422986",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/01-vault/11-advanced.md": {
      "document": {
        "title": "Advanced",
        "folder": "vault",
        "body": {
          "raw": "\n\n\n* Synchronous loading of resources\n",
          "html": "<ul>\n<li>Synchronous loading of resources</li>\n</ul>"
        },
        "_id": "docs/01-vault/11-advanced.md",
        "_raw": {
          "sourceFilePath": "docs/01-vault/11-advanced.md",
          "sourceFileName": "11-advanced.md",
          "sourceFileDir": "docs/01-vault",
          "contentType": "markdown",
          "flattenedPath": "docs/01-vault/11-advanced"
        },
        "type": "Docs",
        "filename": "advanced",
        "url": "/docs/vault/advanced"
      },
      "documentHash": "1652186739068",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/01-vault/12-roadmap.md": {
      "document": {
        "title": "Roadmap",
        "folder": "vault",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/01-vault/12-roadmap.md",
        "_raw": {
          "sourceFilePath": "docs/01-vault/12-roadmap.md",
          "sourceFileName": "12-roadmap.md",
          "sourceFileDir": "docs/01-vault",
          "contentType": "markdown",
          "flattenedPath": "docs/01-vault/12-roadmap"
        },
        "type": "Docs",
        "filename": "roadmap",
        "url": "/docs/vault/roadmap"
      },
      "documentHash": "1651439448011",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/02-helpers/00-index.md": {
      "document": {
        "title": "Helpers",
        "folder": "helpers",
        "hide_navigation": true,
        "body": {
          "raw": "\n# Helpers\n\nhow why etc.\n",
          "html": "<h1>Helpers</h1>\n<p>how why etc.</p>"
        },
        "_id": "docs/02-helpers/00-index.md",
        "_raw": {
          "sourceFilePath": "docs/02-helpers/00-index.md",
          "sourceFileName": "00-index.md",
          "sourceFileDir": "docs/02-helpers",
          "contentType": "markdown",
          "flattenedPath": "docs/02-helpers/00-"
        },
        "type": "Docs",
        "filename": "index",
        "url": "/docs/helpers/index"
      },
      "documentHash": "1651446522622",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/02-helpers/01-thumbnail.md": {
      "document": {
        "title": "Thumbnails",
        "folder": "helpers",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/02-helpers/01-thumbnail.md",
        "_raw": {
          "sourceFilePath": "docs/02-helpers/01-thumbnail.md",
          "sourceFileName": "01-thumbnail.md",
          "sourceFileDir": "docs/02-helpers",
          "contentType": "markdown",
          "flattenedPath": "docs/02-helpers/01-thumbnail"
        },
        "type": "Docs",
        "filename": "thumbnail",
        "url": "/docs/helpers/thumbnail"
      },
      "documentHash": "1651439632759",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/02-helpers/02-internationalisation.md": {
      "document": {
        "title": "Internationalisation",
        "folder": "helpers",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/02-helpers/02-internationalisation.md",
        "_raw": {
          "sourceFilePath": "docs/02-helpers/02-internationalisation.md",
          "sourceFileName": "02-internationalisation.md",
          "sourceFileDir": "docs/02-helpers",
          "contentType": "markdown",
          "flattenedPath": "docs/02-helpers/02-internationalisation"
        },
        "type": "Docs",
        "filename": "internationalisation",
        "url": "/docs/helpers/internationalisation"
      },
      "documentHash": "1651439727921",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/02-helpers/03-styles.md": {
      "document": {
        "title": "Styles",
        "folder": "helpers",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/02-helpers/03-styles.md",
        "_raw": {
          "sourceFilePath": "docs/02-helpers/03-styles.md",
          "sourceFileName": "03-styles.md",
          "sourceFileDir": "docs/02-helpers",
          "contentType": "markdown",
          "flattenedPath": "docs/02-helpers/03-styles"
        },
        "type": "Docs",
        "filename": "styles",
        "url": "/docs/helpers/styles"
      },
      "documentHash": "1651439720244",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/02-helpers/04-events.md": {
      "document": {
        "title": "Events",
        "folder": "helpers",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/02-helpers/04-events.md",
        "_raw": {
          "sourceFilePath": "docs/02-helpers/04-events.md",
          "sourceFileName": "04-events.md",
          "sourceFileDir": "docs/02-helpers",
          "contentType": "markdown",
          "flattenedPath": "docs/02-helpers/04-events"
        },
        "type": "Docs",
        "filename": "events",
        "url": "/docs/helpers/events"
      },
      "documentHash": "1651439714999",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/02-helpers/05-getters.md": {
      "document": {
        "title": "Getters",
        "folder": "helpers",
        "future": true,
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/02-helpers/05-getters.md",
        "_raw": {
          "sourceFilePath": "docs/02-helpers/05-getters.md",
          "sourceFileName": "05-getters.md",
          "sourceFileDir": "docs/02-helpers",
          "contentType": "markdown",
          "flattenedPath": "docs/02-helpers/05-getters"
        },
        "type": "Docs",
        "filename": "getters",
        "url": "/docs/helpers/getters"
      },
      "documentHash": "1651439709688",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/02-helpers/06-annotation-pages.md": {
      "document": {
        "title": "Annotation page manager",
        "folder": "helpers",
        "future": true,
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/02-helpers/06-annotation-pages.md",
        "_raw": {
          "sourceFilePath": "docs/02-helpers/06-annotation-pages.md",
          "sourceFileName": "06-annotation-pages.md",
          "sourceFileDir": "docs/02-helpers",
          "contentType": "markdown",
          "flattenedPath": "docs/02-helpers/06-annotation-pages"
        },
        "type": "Docs",
        "filename": "annotation-pages",
        "url": "/docs/helpers/annotation-pages"
      },
      "documentHash": "1651439747141",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/02-helpers/07-rendering-strategy.md": {
      "document": {
        "title": "Rendering stategy",
        "folder": "helpers",
        "future": true,
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/02-helpers/07-rendering-strategy.md",
        "_raw": {
          "sourceFilePath": "docs/02-helpers/07-rendering-strategy.md",
          "sourceFileName": "07-rendering-strategy.md",
          "sourceFileDir": "docs/02-helpers",
          "contentType": "markdown",
          "flattenedPath": "docs/02-helpers/07-rendering-strategy"
        },
        "type": "Docs",
        "filename": "rendering-strategy",
        "url": "/docs/helpers/rendering-strategy"
      },
      "documentHash": "1651439775434",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/02-helpers/08-object-renderer.md": {
      "document": {
        "title": "Object renderer",
        "folder": "helpers",
        "future": true,
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/02-helpers/08-object-renderer.md",
        "_raw": {
          "sourceFilePath": "docs/02-helpers/08-object-renderer.md",
          "sourceFileName": "08-object-renderer.md",
          "sourceFileDir": "docs/02-helpers",
          "contentType": "markdown",
          "flattenedPath": "docs/02-helpers/08-object-renderer"
        },
        "type": "Docs",
        "filename": "object-renderer",
        "url": "/docs/helpers/object-renderer"
      },
      "documentHash": "1651439770073",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/02-helpers/09-custom-services.md": {
      "document": {
        "title": "Custom services",
        "folder": "helpers",
        "future": true,
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/02-helpers/09-custom-services.md",
        "_raw": {
          "sourceFilePath": "docs/02-helpers/09-custom-services.md",
          "sourceFileName": "09-custom-services.md",
          "sourceFileDir": "docs/02-helpers",
          "contentType": "markdown",
          "flattenedPath": "docs/02-helpers/09-custom-services"
        },
        "type": "Docs",
        "filename": "custom-services",
        "url": "/docs/helpers/custom-services"
      },
      "documentHash": "1651439807607",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/02-helpers/10-canvas-layouts.md": {
      "document": {
        "title": "Canvas layouts",
        "folder": "helpers",
        "future": true,
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/02-helpers/10-canvas-layouts.md",
        "_raw": {
          "sourceFilePath": "docs/02-helpers/10-canvas-layouts.md",
          "sourceFileName": "10-canvas-layouts.md",
          "sourceFileDir": "docs/02-helpers",
          "contentType": "markdown",
          "flattenedPath": "docs/02-helpers/10-canvas-layouts"
        },
        "type": "Docs",
        "filename": "canvas-layouts",
        "url": "/docs/helpers/canvas-layouts"
      },
      "documentHash": "1651439823335",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/03-parser/01-traversing.md": {
      "document": {
        "title": "Traversing",
        "folder": "parser",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/03-parser/01-traversing.md",
        "_raw": {
          "sourceFilePath": "docs/03-parser/01-traversing.md",
          "sourceFileName": "01-traversing.md",
          "sourceFileDir": "docs/03-parser",
          "contentType": "markdown",
          "flattenedPath": "docs/03-parser/01-traversing"
        },
        "type": "Docs",
        "filename": "traversing",
        "url": "/docs/parser/traversing"
      },
      "documentHash": "1651439986952",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/03-parser/02-upgrading.md": {
      "document": {
        "title": "Upgrading",
        "folder": "parser",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/03-parser/02-upgrading.md",
        "_raw": {
          "sourceFilePath": "docs/03-parser/02-upgrading.md",
          "sourceFileName": "02-upgrading.md",
          "sourceFileDir": "docs/03-parser",
          "contentType": "markdown",
          "flattenedPath": "docs/03-parser/02-upgrading"
        },
        "type": "Docs",
        "filename": "upgrading",
        "url": "/docs/parser/upgrading"
      },
      "documentHash": "1651439900488",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/03-parser/03-serialising.md": {
      "document": {
        "title": "Serialising",
        "folder": "parser",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/03-parser/03-serialising.md",
        "_raw": {
          "sourceFilePath": "docs/03-parser/03-serialising.md",
          "sourceFileName": "03-serialising.md",
          "sourceFileDir": "docs/03-parser",
          "contentType": "markdown",
          "flattenedPath": "docs/03-parser/03-serialising"
        },
        "type": "Docs",
        "filename": "serialising",
        "url": "/docs/parser/serialising"
      },
      "documentHash": "1651439908184",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/03-parser/04-bugs.md": {
      "document": {
        "title": "Reporting bugs",
        "folder": "parser",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/03-parser/04-bugs.md",
        "_raw": {
          "sourceFilePath": "docs/03-parser/04-bugs.md",
          "sourceFileName": "04-bugs.md",
          "sourceFileDir": "docs/03-parser",
          "contentType": "markdown",
          "flattenedPath": "docs/03-parser/04-bugs"
        },
        "type": "Docs",
        "filename": "bugs",
        "url": "/docs/parser/bugs"
      },
      "documentHash": "1651439918728",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/04-types/01-accuracy.md": {
      "document": {
        "title": "Accuracy",
        "folder": "types",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/04-types/01-accuracy.md",
        "_raw": {
          "sourceFilePath": "docs/04-types/01-accuracy.md",
          "sourceFileName": "01-accuracy.md",
          "sourceFileDir": "docs/04-types",
          "contentType": "markdown",
          "flattenedPath": "docs/04-types/01-accuracy"
        },
        "type": "Docs",
        "filename": "accuracy",
        "url": "/docs/types/accuracy"
      },
      "documentHash": "1651439935725",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/04-types/02-versions.md": {
      "document": {
        "title": "Version comparison",
        "folder": "types",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/04-types/02-versions.md",
        "_raw": {
          "sourceFilePath": "docs/04-types/02-versions.md",
          "sourceFileName": "02-versions.md",
          "sourceFileDir": "docs/04-types",
          "contentType": "markdown",
          "flattenedPath": "docs/04-types/02-versions"
        },
        "type": "Docs",
        "filename": "versions",
        "url": "/docs/types/versions"
      },
      "documentHash": "1651439959057",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/04-types/03-services.md": {
      "document": {
        "title": "Services and annotations",
        "folder": "types",
        "body": {
          "raw": "",
          "html": ""
        },
        "_id": "docs/04-types/03-services.md",
        "_raw": {
          "sourceFilePath": "docs/04-types/03-services.md",
          "sourceFileName": "03-services.md",
          "sourceFileDir": "docs/04-types",
          "contentType": "markdown",
          "flattenedPath": "docs/04-types/03-services"
        },
        "type": "Docs",
        "filename": "services",
        "url": "/docs/types/services"
      },
      "documentHash": "1651439983794",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    },
    "docs/index.md": {
      "document": {
        "title": "The index",
        "body": {
          "raw": "\n# The index\n\nThis is the index.\n",
          "html": "<h1>The index</h1>\n<p>This is the index.</p>"
        },
        "_id": "docs/index.md",
        "_raw": {
          "sourceFilePath": "docs/index.md",
          "sourceFileName": "index.md",
          "sourceFileDir": "docs",
          "contentType": "markdown",
          "flattenedPath": "docs"
        },
        "type": "Docs",
        "url": "/docs/undefined"
      },
      "documentHash": "1650837596804",
      "hasWarnings": false,
      "documentTypeName": "Docs"
    }
  }
}
