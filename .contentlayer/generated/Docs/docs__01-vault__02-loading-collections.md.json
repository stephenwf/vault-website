{
  "title": "Loading collections",
  "folder": "vault",
  "body": {
    "raw": "\n### Fetching collections\n\nSimilar to [loading manifests](/docs/vault/loading-manifests) you can use a helper to load a Collection with code\nassistance / types.\n```js\nimport { Vault } from '@iiif/vault';\n\nconst vault = new Vault();\nconst collection = await vault.loadCollection('https://example.org/collection-1');\n```\n\nYou can also use the normal `vault.load()` too.\n\nAll the same rules apply as manifests.\n\n### Paginated collections\n\nVault does not treat paginated collections as special. They are treated as independent collections. You could create\na [Vault Helper](/docs/helpers) to make this seamless. If you do, please let us know!\n\n### Streaming large collections\n\nVault does not support streaming large collections, but it is an area that may be useful\nfor some of the largest IIIF collections. In principle the actions to create this type of loader are available.\n\n```js\nimport { importEntities } from '@iiif/vault/actions';\nimport { actionListFromResource } from '@iiif/vault/utility';\n\nconst loader = someLibrary('https://example.org/big-collection-1', async (manifest) => {\n    // Create actions from resource\n    const actions = actionListFromResource(manifest.id, manifest);\n    // Dispatch events (loading in a single manifest at a time, as it streams)\n    vault.store.dispatch(batchActions({ actions }));\n});\n\n\nloader.take(100); // Just an example - laod the first 100.\n```\n",
    "html": "<h3>Fetching collections</h3>\n<p>Similar to <a href=\"/docs/vault/loading-manifests\">loading manifests</a> you can use a helper to load a Collection with code\nassistance / types.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Vault</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@iiif/vault'</span>;\n\n<span class=\"hljs-keyword\">const</span> vault = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vault</span>();\n<span class=\"hljs-keyword\">const</span> collection = <span class=\"hljs-keyword\">await</span> vault.<span class=\"hljs-title function_\">loadCollection</span>(<span class=\"hljs-string\">'https://example.org/collection-1'</span>);\n</code></pre>\n<p>You can also use the normal <code>vault.load()</code> too.</p>\n<p>All the same rules apply as manifests.</p>\n<h3>Paginated collections</h3>\n<p>Vault does not treat paginated collections as special. They are treated as independent collections. You could create\na <a href=\"/docs/helpers\">Vault Helper</a> to make this seamless. If you do, please let us know!</p>\n<h3>Streaming large collections</h3>\n<p>Vault does not support streaming large collections, but it is an area that may be useful\nfor some of the largest IIIF collections. In principle the actions to create this type of loader are available.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { importEntities } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@iiif/vault/actions'</span>;\n<span class=\"hljs-keyword\">import</span> { actionListFromResource } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@iiif/vault/utility'</span>;\n\n<span class=\"hljs-keyword\">const</span> loader = <span class=\"hljs-title function_\">someLibrary</span>(<span class=\"hljs-string\">'https://example.org/big-collection-1'</span>, <span class=\"hljs-keyword\">async</span> (manifest) => {\n    <span class=\"hljs-comment\">// Create actions from resource</span>\n    <span class=\"hljs-keyword\">const</span> actions = <span class=\"hljs-title function_\">actionListFromResource</span>(manifest.<span class=\"hljs-property\">id</span>, manifest);\n    <span class=\"hljs-comment\">// Dispatch events (loading in a single manifest at a time, as it streams)</span>\n    vault.<span class=\"hljs-property\">store</span>.<span class=\"hljs-title function_\">dispatch</span>(<span class=\"hljs-title function_\">batchActions</span>({ actions }));\n});\n\n\nloader.<span class=\"hljs-title function_\">take</span>(<span class=\"hljs-number\">100</span>); <span class=\"hljs-comment\">// Just an example - laod the first 100.</span>\n</code></pre>"
  },
  "_id": "docs/01-vault/02-loading-collections.md",
  "_raw": {
    "sourceFilePath": "docs/01-vault/02-loading-collections.md",
    "sourceFileName": "02-loading-collections.md",
    "sourceFileDir": "docs/01-vault",
    "contentType": "markdown",
    "flattenedPath": "docs/01-vault/02-loading-collections"
  },
  "type": "Docs",
  "filename": "loading-collections",
  "url": "/docs/vault/loading-collections"
}