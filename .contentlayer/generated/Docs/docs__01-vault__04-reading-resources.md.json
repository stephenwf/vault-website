{
  "title": "Reading resources",
  "folder": "vault",
  "body": {
    "raw": "\n### How references work\nWhen you load a resource into Vault, each level of the resource will be flattened. For example, in a Manifest, all\nthe Canvases will be replaced with `{id,type}` references. \n```json\n{\n  \"id\": \"https://example.org/manifest-1\",\n  \"type\": \"Manifest\",\n  \"items\": [\n    { \"id\":  \"https://example.org/manifest-1/c1\", \"type\":  \"Canvas\" },\n    { \"id\":  \"https://example.org/manifest-1/c2\", \"type\":  \"Canvas\" },\n    { \"id\":  \"https://example.org/manifest-1/c3\", \"type\":  \"Canvas\" }\n    ...\n    { \"id\":  \"https://example.org/manifest-1/c62\", \"type\":  \"Canvas\" }\n  ]\n}\n```\n\nThis is done for many reasons, and the full detailed transformation is detailed [here](/docs/vault/advanced#normalization).\n\nIf you want to get the resolved resource you can use one of two methods: `vault.get()` or `vault.hydrate()`. They work\nin a similar way. \n\n\nVault.get will return either the resolved resource if it exists in Vault, or undefined if not.\n```js\nvault.get('https://example.org/manifest-1/c1');\n// > { id: '...' }\n\nvault.get({ id: 'https://example.org/manifest-1/c1', type: 'Canvas' });\n// > { id: '...' }\n\nvault.get('https://example.org/DOES_NOT_EXIST');\n// > undefined\n```\n\nVault.hydrate will return itself if the resource does not exist, allowing for a more predictable return type - particularly\n useful in Reactive environments where a resource will eventually exist.\n```js\nvault.hydrate('https://example.org/manifest-1/c1');\n// > { id: '...' }\n\nvault.hydate('https://example.org/DOES_NOT_EXIST');\n// > { id: 'https://example.org/DOES_NOT_EXIST', type: 'unknown' }\n\nvault.hydate({ id: 'https://example.org/DOES_NOT_EXIST', type: 'Manifest' });\n// > { id: 'https://example.org/DOES_NOT_EXIST', type: 'Manifest' }\n```\n\n\nBoth `Vault.get()` and `Vault.hydrate()` can accept many types of input - and it will try to return the correct type. It\ncan accept:\n\n* String identifiers\n* {id,type} references\n* List of strings\n* List of {id,type} references\n* List of mixed strings/references\n* Also in the form: `get(id, type)`\n\nThe natural form of this is `vault.get({ id, type })` and this should be preferred if possible. 99% of the time you should\nnot need to manually pass an ID or reference in this form, instead just pass in existing partial resources:\n\n```js\nconst manifest = vault.get('https://example.org/manifest-1'); // loaded previously.\nconst allCanvases = vault.get(manifest.canvases); // resolved canvases.\n\nfor (const canvas of allCanvases) {\n  const annoPages = vault.get(canvas.items);\n  // ...\n}\n```\n\nIdentifiers\nGuidelines on reusability\nCustom + legacy services\nAnnotations and variations\nLanguage maps\n",
    "html": "<h3>How references work</h3>\n<p>When you load a resource into Vault, each level of the resource will be flattened. For example, in a Manifest, all\nthe Canvases will be replaced with <code>{id,type}</code> references.</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://example.org/manifest-1\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Manifest\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"items\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"https://example.org/manifest-1/c1\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"Canvas\"</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"https://example.org/manifest-1/c2\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"Canvas\"</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"https://example.org/manifest-1/c3\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"Canvas\"</span> <span class=\"hljs-punctuation\">}</span>\n    ...\n    <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">\"id\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"https://example.org/manifest-1/c62\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">\"Canvas\"</span> <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>This is done for many reasons, and the full detailed transformation is detailed <a href=\"/docs/vault/advanced#normalization\">here</a>.</p>\n<p>If you want to get the resolved resource you can use one of two methods: <code>vault.get()</code> or <code>vault.hydrate()</code>. They work\nin a similar way.</p>\n<p>Vault.get will return either the resolved resource if it exists in Vault, or undefined if not.</p>\n<pre><code class=\"hljs language-js\">vault.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'https://example.org/manifest-1/c1'</span>);\n<span class=\"hljs-comment\">// > { id: '...' }</span>\n\nvault.<span class=\"hljs-title function_\">get</span>({ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">'https://example.org/manifest-1/c1'</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'Canvas'</span> });\n<span class=\"hljs-comment\">// > { id: '...' }</span>\n\nvault.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'https://example.org/DOES_NOT_EXIST'</span>);\n<span class=\"hljs-comment\">// > undefined</span>\n</code></pre>\n<p>Vault.hydrate will return itself if the resource does not exist, allowing for a more predictable return type - particularly\nuseful in Reactive environments where a resource will eventually exist.</p>\n<pre><code class=\"hljs language-js\">vault.<span class=\"hljs-title function_\">hydrate</span>(<span class=\"hljs-string\">'https://example.org/manifest-1/c1'</span>);\n<span class=\"hljs-comment\">// > { id: '...' }</span>\n\nvault.<span class=\"hljs-title function_\">hydate</span>(<span class=\"hljs-string\">'https://example.org/DOES_NOT_EXIST'</span>);\n<span class=\"hljs-comment\">// > { id: 'https://example.org/DOES_NOT_EXIST', type: 'unknown' }</span>\n\nvault.<span class=\"hljs-title function_\">hydate</span>({ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">'https://example.org/DOES_NOT_EXIST'</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'Manifest'</span> });\n<span class=\"hljs-comment\">// > { id: 'https://example.org/DOES_NOT_EXIST', type: 'Manifest' }</span>\n</code></pre>\n<p>Both <code>Vault.get()</code> and <code>Vault.hydrate()</code> can accept many types of input - and it will try to return the correct type. It\ncan accept:</p>\n<ul>\n<li>String identifiers</li>\n<li>{id,type} references</li>\n<li>List of strings</li>\n<li>List of {id,type} references</li>\n<li>List of mixed strings/references</li>\n<li>Also in the form: <code>get(id, type)</code></li>\n</ul>\n<p>The natural form of this is <code>vault.get({ id, type })</code> and this should be preferred if possible. 99% of the time you should\nnot need to manually pass an ID or reference in this form, instead just pass in existing partial resources:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> manifest = vault.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'https://example.org/manifest-1'</span>); <span class=\"hljs-comment\">// loaded previously.</span>\n<span class=\"hljs-keyword\">const</span> allCanvases = vault.<span class=\"hljs-title function_\">get</span>(manifest.<span class=\"hljs-property\">canvases</span>); <span class=\"hljs-comment\">// resolved canvases.</span>\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> canvas <span class=\"hljs-keyword\">of</span> allCanvases) {\n  <span class=\"hljs-keyword\">const</span> annoPages = vault.<span class=\"hljs-title function_\">get</span>(canvas.<span class=\"hljs-property\">items</span>);\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>Identifiers\nGuidelines on reusability\nCustom + legacy services\nAnnotations and variations\nLanguage maps</p>"
  },
  "_id": "docs/01-vault/04-reading-resources.md",
  "_raw": {
    "sourceFilePath": "docs/01-vault/04-reading-resources.md",
    "sourceFileName": "04-reading-resources.md",
    "sourceFileDir": "docs/01-vault",
    "contentType": "markdown",
    "flattenedPath": "docs/01-vault/04-reading-resources"
  },
  "type": "Docs",
  "filename": "reading-resources",
  "url": "/docs/vault/reading-resources"
}