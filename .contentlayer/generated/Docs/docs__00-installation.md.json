{
  "title": "Installation",
  "body": {
    "raw": "\nVault is intended to be a common dependency used by more than one tool. For this reason it's important\nthat you can load Vault from from prototypes to production bundlers. If you run into problems loading\nVault into your application, [please let us know on Github](https://github.com/IIIF-Commons/vault/issues/13)\n\n## HTML / no bundler\n\nThe easiest way to work with Vault is to grab the code from a CDN and put it into a script tag - avoiding any\nneed to build or run a server.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Vault Example</title>\n  </head>\n  <body>\n    <script src=\"https://cdn.jsdelivr.net/npm/@iiif/vault@latest/dist/index.umd.js\"></script>\n    <script>\n      let manifestUri = 'https://digirati-co-uk.github.io/journal.json';\n      const vault = new IIIFVault.Vault();\n\n      async function demo() {\n        const manifest = await vault.load(manifestUri);\n        console.log(manifest);\n      }\n\n      demo();\n    </script>\n  </body>\n</html>\n```\n\n[![Try on codesandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/iiif-vault-html-vkyuyk?file=/index.html)\n\nSimilarly you can access the Vault helpers by adding:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/@iiif/vault@latest/dist/index.umd.js\"></script>\n<script>\n  const helper = IIIFVaultHelpers.createThumbnailHelper();\n</script>\n```\n\n## NPM / Yarn or bundler\n\nUsing vault shouldn't add any extra steps or configuration to your existing build. Ideally the following\ninstructions would be unviersal:\n\n```bash\n# NPM\nnpm i @iiif/vault --save\n\n# Yarn\nyarn add @iiif/vault\n```\n\nAnd then you can use in your code:\n\n```js\nimport { Vault } from '@iiif/vault';\n\nconst vault = new Vault();\n```\n\n[![Try on codesandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/iiif-vault-intro-e26819?file=/src/index.ts)\n\n## NodeJS\n\nIf you are using NodeJS you can either use the `import` syntax or `require` depending on which [module type](https://blog.logrocket.com/commonjs-vs-es-modules-node-js/) you are using.\n\n```js\nconst { Vault } = require('@iiif/vault');\n\nconst vault = new Vault();\n```\n\nNode 18 introduced [native fetch](https://nodejs.org/en/blog/announcements/v18-release-announce/#fetch-experimental) experimentally. This is not currently supported, and we will use an\nincluded [polyfill](https://github.com/node-fetch/node-fetch) for browser fetching. We may introduce `@iiif/vault/node18` as an optional import, however this may be the same code as the browser is serving.\n",
    "html": "<p>Vault is intended to be a common dependency used by more than one tool. For this reason it's important\nthat you can load Vault from from prototypes to production bundlers. If you run into problems loading\nVault into your application, <a href=\"https://github.com/IIIF-Commons/vault/issues/13\">please let us know on Github</a></p>\n<h2>HTML / no bundler</h2>\n<p>The easiest way to work with Vault is to grab the code from a CDN and put it into a script tag - avoiding any\nneed to build or run a server.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Vault Example<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/@iiif/vault@latest/dist/index.umd.js\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">let</span> manifestUri = <span class=\"hljs-string\">'https://digirati-co-uk.github.io/journal.json'</span>;\n      <span class=\"hljs-keyword\">const</span> vault = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IIIFVault</span>.<span class=\"hljs-title class_\">Vault</span>();\n\n      <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">demo</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">const</span> manifest = <span class=\"hljs-keyword\">await</span> vault.<span class=\"hljs-title function_\">load</span>(manifestUri);\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(manifest);\n      }\n\n      <span class=\"hljs-title function_\">demo</span>();\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/iiif-vault-html-vkyuyk?file=/index.html\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Try on codesandbox\"></a></p>\n<p>Similarly you can access the Vault helpers by adding:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/@iiif/vault@latest/dist/index.umd.js\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">const</span> helper = <span class=\"hljs-title class_\">IIIFVaultHelpers</span>.<span class=\"hljs-title function_\">createThumbnailHelper</span>();\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n<h2>NPM / Yarn or bundler</h2>\n<p>Using vault shouldn't add any extra steps or configuration to your existing build. Ideally the following\ninstructions would be unviersal:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># NPM</span>\nnpm i @iiif/vault --save\n\n<span class=\"hljs-comment\"># Yarn</span>\nyarn add @iiif/vault\n</code></pre>\n<p>And then you can use in your code:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Vault</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@iiif/vault'</span>;\n\n<span class=\"hljs-keyword\">const</span> vault = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vault</span>();\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/iiif-vault-intro-e26819?file=/src/index.ts\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Try on codesandbox\"></a></p>\n<h2>NodeJS</h2>\n<p>If you are using NodeJS you can either use the <code>import</code> syntax or <code>require</code> depending on which <a href=\"https://blog.logrocket.com/commonjs-vs-es-modules-node-js/\">module type</a> you are using.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">Vault</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@iiif/vault'</span>);\n\n<span class=\"hljs-keyword\">const</span> vault = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vault</span>();\n</code></pre>\n<p>Node 18 introduced <a href=\"https://nodejs.org/en/blog/announcements/v18-release-announce/#fetch-experimental\">native fetch</a> experimentally. This is not currently supported, and we will use an\nincluded <a href=\"https://github.com/node-fetch/node-fetch\">polyfill</a> for browser fetching. We may introduce <code>@iiif/vault/node18</code> as an optional import, however this may be the same code as the browser is serving.</p>"
  },
  "_id": "docs/00-installation.md",
  "_raw": {
    "sourceFilePath": "docs/00-installation.md",
    "sourceFileName": "00-installation.md",
    "sourceFileDir": "docs",
    "contentType": "markdown",
    "flattenedPath": "docs/00-installation"
  },
  "type": "Docs",
  "filename": "installation",
  "url": "/docs/installation"
}